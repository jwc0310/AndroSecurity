/* ELF Header 32bit and 64bit */
typedef struct elfhdr {
    unsigned char    e_ident[EI_NIDENT]; /* ELF Identification */
    Elf32_Half    e_type;        /* object file type */
    Elf32_Half    e_machine;    /* machine */
    Elf32_Word    e_version;    /* object file version */
    Elf32_Addr    e_entry;    /* virtual entry point */
    Elf32_Off    e_phoff;    /* program header table offset */
    Elf32_Off    e_shoff;    /* section header table offset */
    Elf32_Word    e_flags;    /* processor-specific flags */
    Elf32_Half    e_ehsize;    /* ELF header size */
    Elf32_Half    e_phentsize;    /* program header entry size */
    Elf32_Half    e_phnum;    /* number of program header entries */
    Elf32_Half    e_shentsize;    /* section header entry size */
    Elf32_Half    e_shnum;    /* number of section header entries */
    Elf32_Half    e_shstrndx;    /* section header table's "section
                       header string table" entry offset */
} Elf32_Ehdr;

typedef struct {
    unsigned char    e_ident[EI_NIDENT];    /* Id bytes */
    Elf64_Quarter    e_type;            /* file type */
    Elf64_Quarter    e_machine;        /* machine type */
    Elf64_Half    e_version;        /* version number */
    Elf64_Addr    e_entry;        /* entry point */
    Elf64_Off    e_phoff;        /* Program hdr offset */
    Elf64_Off    e_shoff;        /* Section hdr offset */
    Elf64_Half    e_flags;        /* Processor flags */
    Elf64_Quarter    e_ehsize;        /* sizeof ehdr */
    Elf64_Quarter    e_phentsize;        /* Program header entry size */
    Elf64_Quarter    e_phnum;        /* Number of program headers */
    Elf64_Quarter    e_shentsize;        /* Section header entry size */
    Elf64_Quarter    e_shnum;        /* Number of section headers */
    Elf64_Quarter    e_shstrndx;        /* String table index */
} Elf64_Ehdr;


查看文件头命令
readelf -h hello.so

ELF 头：
  Magic：  7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
  类别:                             ELF32
  数据:                             2 补码，小端序 (little endian)
  版本:                             1 (current)
  OS/ABI:                           UNIX - System V
  ABI 版本:                         0
  类型:                             DYN (共享目标文件)
  系统架构:                          ARM
  版本:                             0x1
  入口点地址：                       0x0
  程序头起点：                       52 (bytes into file)
  Start of section headers:        61816 (bytes into file)
  标志：                            0x5000000, Version5 EABI
  本头的大小：                       52 (字节)
  程序头大小：                       32 (字节)
  Number of program headers:       9
  节头大小：                        40 (字节)
  节头数量：                        24
  字符串表索引节头：                 23


程序头部（Program Header）

    可执行文件或者共享目标文件的程序头部是一个结构数组，每个结构描述了一个段 或者系统准备程序执行所必需的其它信息。
    目标文件的“段”包含一个或者多个“节区”， 也就是“段内容(Segment Contents)”。程序头部仅对于可执行文件和共享目标文件 有意义。
    可执行目标文件在 ELF 头部的 e_phentsize 和 e_phnum 成员中给出其自身程序头部 的大小。程序头部的数据结构:

    /* Program Header */
    typedef struct {
        Elf32_Word    p_type;        /* segment type */
        Elf32_Off    p_offset;    /* segment offset */
        Elf32_Addr    p_vaddr;    /* virtual address of segment */
        Elf32_Addr    p_paddr;    /* physical address - ignored? */
        Elf32_Word    p_filesz;    /* number of bytes in file for seg. */
        Elf32_Word    p_memsz;    /* number of bytes in mem. for seg. */
        Elf32_Word    p_flags;    /* flags */
        Elf32_Word    p_align;    /* memory alignment */
    } Elf32_Phdr;

    typedef struct {
        Elf64_Half    p_type;        /* entry type */
        Elf64_Half    p_flags;    /* flags */
        Elf64_Off    p_offset;    /* offset */
        Elf64_Addr    p_vaddr;    /* virtual address */
        Elf64_Addr    p_paddr;    /* physical address */
        Elf64_Xword    p_filesz;    /* file size */
        Elf64_Xword    p_memsz;    /* memory size */
        Elf64_Xword    p_align;    /* memory & file alignment */
    } Elf64_Phdr;

    其中各个字段说明：

    p_type 此数组元素描述的段的类型，或者如何解释此数组元素的信息。具体如下图。
    p_offset 此成员给出从文件头到该段第一个字节的偏移。
    p_vaddr 此成员给出段的第一个字节将被放到内存中的虚拟地址。
    p_paddr 此成员仅用于与物理地址相关的系统中。
            因为 System V 忽略所有应用程序的物理地址信息，此字段对与可执行文件和共享目标文件而言具体内容是指定的。
    p_filesz 此成员给出段在文件映像中所占的字节数。可以为 0。
    p_memsz 此成员给出段在内存映像中占用的字节数。可以为 0。
    p_flags 此成员给出与段相关的标志。
    p_align 可加载的进程段的 p_vaddr 和 p_offset 取值必须合适，相对于对页面大小的取模而言。
            此成员给出段在文件中和内存中如何 对齐。数值 0 和 1 表示不需要对齐。否则 p_align 应该是个正整数，并且是 2 的幂次数，
            p_vaddr 和 p_offset 对 p_align 取模后应该相等。


节区（Sections）
    节区中包含目标文件中的所有信息，除了:ELF 头部、程序头部表格、节区头部
    表格。节区满足以下条件:

    目标文件中的每个节区都有对应的节区头部描述它，反过来，有节区头部不意 味着有节区。

    每个节区占用文件中一个连续字节区域(这个区域可能长度为 0)。

    文件中的节区不能重叠，不允许一个字节存在于两个节区中的情况发生。

    目标文件中可能包含非活动空间(INACTIVE SPACE)。这些区域不属于任何头部和节区，其内容指定。

节区头部表格
    ELF 头部中，
    e_shoff 成员给出从文件头到节区头部表格的偏移字节数;
    e_shnum 给出表格中条目数目;
    e_shentsize 给出每个项目的字节数。从这些信息中可以确切地定 位节区的具体位置、长度。

    /* Section Header */
    typedef struct {
        Elf32_Word    sh_name;    /* name - index into section header
                           string table section */
        Elf32_Word    sh_type;    /* type */
        Elf32_Word    sh_flags;    /* flags */
        Elf32_Addr    sh_addr;    /* address */
        Elf32_Off    sh_offset;    /* file offset */
        Elf32_Word    sh_size;    /* section size */
        Elf32_Word    sh_link;    /* section header table index link */
        Elf32_Word    sh_info;    /* extra information */
        Elf32_Word    sh_addralign;    /* address alignment */
        Elf32_Word    sh_entsize;    /* section entry size */
    } Elf32_Shdr;

    typedef struct {
        Elf64_Half    sh_name;    /* section name */
        Elf64_Half    sh_type;    /* section type */
        Elf64_Xword    sh_flags;    /* section flags */
        Elf64_Addr    sh_addr;    /* virtual address */
        Elf64_Off    sh_offset;    /* file offset */
        Elf64_Xword    sh_size;    /* section size */
        Elf64_Half    sh_link;    /* link to another */
        Elf64_Half    sh_info;    /* misc info */
        Elf64_Xword    sh_addralign;    /* memory alignment */
        Elf64_Xword    sh_entsize;    /* table entry size */
    } Elf64_Shdr;




